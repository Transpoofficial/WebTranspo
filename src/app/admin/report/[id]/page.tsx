"use client";

import { useParams } from "next/navigation";
import { CalendarDays } from "lucide-react";
import {
  Card,
  CardContent,
  CardDescription,
  CardHeader,
  CardTitle,
} from "@/components/ui/card";
import { Badge } from "@/components/ui/badge";
import { useQuery } from "@tanstack/react-query";
import axios from "axios";

export default function ReportDetailPage() {
  const params = useParams();

  const {
    data: reportData,
    isLoading,
    error,
  } = useQuery({
    queryKey: ["report", params.id],
    queryFn: async () => {
      const { data } = await axios.get(`/api/reports/${params.id}`);
      return data.data;
    },
  });

  const formatCurrency = (amount: string | number) => {
    const numAmount = typeof amount === "string" ? parseFloat(amount) : amount;
    return new Intl.NumberFormat("id-ID", {
      style: "currency",
      currency: "IDR",
    }).format(numAmount);
  };

  const formatDate = (dateString: string) => {
    return new Intl.DateTimeFormat("id-ID", {
      year: "numeric",
      month: "long",
      day: "numeric",
    }).format(new Date(dateString));
  };

  if (isLoading) return <div className="container mx-auto p-6">Loading...</div>;
  if (error)
    return (
      <div className="container mx-auto p-6 text-red-500">
        Error: {(error as Error).message}
      </div>
    );
  if (!reportData)
    return <div className="container mx-auto p-6">No report found</div>;

  return (
      <div className="space-y-4 md:space-y-6">
        {/* Basic Info Card */}
        <Card>
          <CardHeader>
            <div className="flex items-center justify-between">
              <div>
                <CardTitle>ID: {reportData.id}</CardTitle>
                <CardDescription>
                  Periode: {reportData.reportPeriod}
                </CardDescription>
              </div>
              <Badge
                variant={reportData.isAutoGenerated ? "secondary" : "default"}
              >
                {reportData.isAutoGenerated ? "Auto Generated" : "Manual"}
              </Badge>
            </div>
          </CardHeader>
          <CardContent className="p-4 md:p-6">
            <div className="flex items-center space-x-2 text-muted-foreground">
              <CalendarDays className="h-4 w-4" />
              <span>
                {formatDate(reportData.startDate)} -{" "}
                {formatDate(reportData.endDate)}
              </span>
            </div>
          </CardContent>
        </Card>

        {/* Orders Statistics */}
        <Card>
          <CardHeader>
            <CardTitle>Statistik Pesanan</CardTitle>
          </CardHeader>
          <CardContent>
            <div className="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-4">
              <div className="space-y-1">
                <p className="text-sm font-medium text-muted-foreground">
                  Total Pendapatan
                </p>
                <p className="text-2xl font-bold">
                  {formatCurrency(reportData.totalIncome)}
                </p>
              </div>
              <div className="space-y-1">
                <p className="text-sm font-medium text-muted-foreground">
                  Total Pesanan
                </p>
                <p className="text-2xl font-bold">{reportData.totalOrders}</p>
              </div>
              <div className="space-y-1">
                <p className="text-sm font-medium text-muted-foreground">
                  Pesanan Selesai
                </p>
                <p className="text-2xl font-bold">
                  {reportData.completedOrders}
                </p>
              </div>
              <div className="space-y-1">
                <p className="text-sm font-medium text-muted-foreground">
                  Pesanan Dibatalkan
                </p>
                <p className="text-2xl font-bold">
                  {reportData.canceledOrders}
                </p>
              </div>
              <div className="space-y-1">
                <p className="text-sm font-medium text-muted-foreground">
                  Pesanan Pending
                </p>
                <p className="text-2xl font-bold">{reportData.pendingOrders}</p>
              </div>
            </div>
          </CardContent>
        </Card>

        {/* Service Types */}
        <Card>
          <CardHeader>
            <CardTitle>Jenis Layanan</CardTitle>
          </CardHeader>
          <CardContent>
            <div className="grid grid-cols-1 sm:grid-cols-2 gap-4">
              <div className="space-y-1">
                <p className="text-sm font-medium text-muted-foreground">
                  Transport
                </p>
                <p className="text-2xl font-bold">
                  {reportData.transportOrders}
                </p>
              </div>
              <div className="space-y-1">
                <p className="text-sm font-medium text-muted-foreground">
                  Tour
                </p>
                <p className="text-2xl font-bold">{reportData.tourOrders}</p>
              </div>
            </div>
          </CardContent>
        </Card>

        {/* Popular Destinations */}
        <Card>
          <CardHeader>
            <CardTitle>Destinasi Populer</CardTitle>
          </CardHeader>
          <CardContent className="max-h-[300px] overflow-y-auto">
            {Object.keys(reportData.popularDestinations).length === 0 ? (
              <p className="text-sm text-muted-foreground">
                Tidak ada data destinasi
              </p>
            ) : (
              <div className="space-y-4">
                {Object.entries(reportData.popularDestinations)
                  .sort(([, a], [, b]) => (b as number) - (a as number))
                  .map(([destination, count], index) => (
                    <div
                      key={index}
                      className="flex justify-between items-center"
                    >
                      <div className="flex-1">
                        <p
                          className="text-sm font-medium truncate"
                          title={destination}
                        >
                          {destination}
                        </p>
                      </div>
                      <Badge variant="secondary">{(count as number)} orders</Badge>
                    </div>
                  ))}
              </div>
            )}
          </CardContent>
        </Card>

        {/* Top Vehicle Types */}
        <Card>
          <CardHeader>
            <CardTitle>Jenis Kendaraan Teratas</CardTitle>
          </CardHeader>
          <CardContent className="max-h-[300px] overflow-y-auto">
            {Object.keys(reportData.topVehicleTypes).length === 0 ? (
              <p className="text-sm text-muted-foreground">
                Tidak ada data kendaraan
              </p>
            ) : (
              <div className="space-y-4">
                {(() => {
                  // Calculate total orders first
                  const totalVehicleOrders = Object.values(
                    reportData.topVehicleTypes
                  ).reduce<number>(
                    (sum, count) =>
                      sum + (typeof count === "number" ? count : 0),
                    0
                  );

                  return Object.entries(reportData.topVehicleTypes)
                    .sort(([, a], [, b]) => (b as number) - (a as number))
                    .map(([vehicleType, count], index) => {
                      // Calculate percentage
                      const percentage =
                        totalVehicleOrders > 0
                          ? ((count as number) * 100) / totalVehicleOrders
                          : 0;

                      return (
                        <div
                          key={index}
                          className="flex justify-between items-center"
                        >
                          <p className="text-sm font-medium">{vehicleType}</p>
                          <div className="flex items-center gap-2">
                            <Badge variant="outline">{String(count)} orders</Badge>
                            <Badge variant="secondary">
                              {Math.round(percentage)}%
                            </Badge>
                          </div>
                        </div>
                      );
                    });
                })()}
              </div>
            )}
          </CardContent>
        </Card>

        {/* Rating Card - Only show if there's a rating */}
        {reportData.averageRating && (
          <Card>
            <CardHeader>
              <CardTitle>Rating Rata-rata</CardTitle>
            </CardHeader>
            <CardContent>
              <div className="flex items-center gap-2">
                <span className="text-2xl font-bold">
                  {reportData.averageRating.toFixed(1)}
                </span>
                <span className="text-2xl text-yellow-500">â˜…</span>
              </div>
            </CardContent>
          </Card>
        )}

        {/* Report Metadata Card */}
        <Card>
          <CardHeader>
            <CardTitle>Informasi Laporan</CardTitle>
          </CardHeader>
          <CardContent>
            <div className="grid grid-cols-1 sm:grid-cols-2 gap-4">
              <div>
                <p className="text-sm font-medium text-muted-foreground">
                  Dibuat
                </p>
                <p className="text-sm">{formatDate(reportData.createdAt)}</p>
              </div>
              <div>
                <p className="text-sm font-medium text-muted-foreground">
                  Terakhir Diperbarui
                </p>
                <p className="text-sm">{formatDate(reportData.updatedAt)}</p>
              </div>
            </div>
          </CardContent>
        </Card>
      </div>
  );
}
