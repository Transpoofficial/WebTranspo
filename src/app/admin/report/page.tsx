"use client";

import { Eye, RefreshCw, Calendar, TrendingUp, Loader2 } from "lucide-react";
import { Button } from "@/components/ui/button";
import {
  Card,
  CardContent,
  CardDescription,
  CardHeader,
  CardTitle,
} from "@/components/ui/card";
import {
  Table,
  TableBody,
  TableCell,
  TableHead,
  TableHeader,
  TableRow,
} from "@/components/ui/table";
import { Badge } from "@/components/ui/badge";
import { useRouter } from "next/navigation";
import { useQuery } from "@tanstack/react-query";
import axios from "axios";

interface Report {
  id: string;
  reportPeriod: "DAILY" | "WEEKLY" | "MONTHLY" | "YEARLY";
  startDate: string;
  endDate: string;
  totalIncome: string;
  totalOrders: number;
  completedOrders: number;
  canceledOrders: number;
  pendingOrders: number;
  transportOrders: number;
  tourOrders: number;
  averageRating: number | null;
  popularDestinations: Record<string, number>;
  topVehicleTypes: Record<string, { count: number; percentage: number }>;
  isAutoGenerated: boolean;
  createdAt: string;
  updatedAt: string;
}

interface ReportsResponse {
  success: boolean;
  message: string;
  data: {
    DAILY: Report[];
    WEEKLY: Report[];
    MONTHLY: Report[];
    YEARLY: Report[];
  };
}

const getReports = async (): Promise<ReportsResponse> => {
  const { data } = await axios.get("/api/reports");
  return data;
};

export default function Report() {
  const router = useRouter();

  const { data: reportsResponse, isLoading } = useQuery({
    queryKey: ["reports"],
    queryFn: getReports,
  });

  const reportsData = reportsResponse
    ? [
        ...reportsResponse.data.DAILY,
        ...reportsResponse.data.WEEKLY,
        ...reportsResponse.data.MONTHLY,
        ...reportsResponse.data.YEARLY,
      ]
    : [];

  const formatCurrency = (amount: number) => {
    return new Intl.NumberFormat("id-ID", {
      style: "currency",
      currency: "IDR",
    }).format(amount);
  };

  // Updated date formatting function to handle ISO strings
  const formatDate = (dateString: string) => {
    try {
      const date = new Date(dateString);
      if (isNaN(date.getTime())) {
        return "-"; // Return fallback if date is invalid
      }
      return new Intl.DateTimeFormat("id-ID", {
        year: "numeric",
        month: "short",
        day: "numeric",
      }).format(date);
    } catch {
      return "-"; // Return fallback if date parsing fails
    }
  };

  const handleViewReport = (reportId: string) => {
    router.push(`/admin/report/${reportId}`);
  };

  const getPeriodLabel = (period: string) => {
    switch (period) {
      case "DAILY":
        return "Harian";
      case "WEEKLY":
        return "Mingguan";
      case "MONTHLY":
        return "Bulanan";
      case "YEARLY":
        return "Tahunan";
      default:
        return period;
    }
  };

  // Update summary calculations for new data structure
  const totalIncomeAllReports = reportsData.reduce(
    (sum, r) => sum + parseFloat(r.totalIncome),
    0
  );

  // Add loading spinner component
  const LoadingSpinner = () => (
    <div className="flex items-center justify-center">
      <Loader2 className="h-6 w-6 animate-spin text-muted-foreground" />
    </div>
  );

  return (
    <>
      <h1 className="text-xl md:text-2xl font-bold tracking-tight">Laporan</h1>

      {/* Summary Cards */}
      <div className="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 gap-4 my-4">
        <Card>
          <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
            <CardTitle className="text-sm font-medium">Total Pesanan</CardTitle>
            <Calendar className="h-4 w-4 text-muted-foreground" />
          </CardHeader>
          <CardContent>
            {isLoading ? (
              <LoadingSpinner />
            ) : (
              <div className="text-2xl font-bold">
                {reportsData.reduce((sum, r) => sum + r.totalOrders, 0)}
              </div>
            )}
          </CardContent>
        </Card>

        <Card>
          <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
            <CardTitle className="text-sm font-medium">
              Total Pendapatan
            </CardTitle>
            <TrendingUp className="h-4 w-4 text-muted-foreground" />
          </CardHeader>
          <CardContent>
            {isLoading ? (
              <LoadingSpinner />
            ) : (
              <div className="text-2xl font-bold">
                {formatCurrency(totalIncomeAllReports)}
              </div>
            )}
          </CardContent>
        </Card>

        <Card>
          <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
            <CardTitle className="text-sm font-medium">
              Laporan Terbaru
            </CardTitle>
            <RefreshCw className="h-4 w-4 text-muted-foreground" />
          </CardHeader>
          <CardContent>
            {isLoading ? (
              <LoadingSpinner />
            ) : (
              <div className="text-2xl font-bold">
                {reportsData[0]?.createdAt
                  ? formatDate(reportsData[0].createdAt)
                  : "-"}
              </div>
            )}
          </CardContent>
        </Card>
      </div>

      {/* Reports Table */}
      <Card>
        <CardHeader>
          <CardTitle>Daftar Laporan</CardTitle>
          <CardDescription>
            Semua laporan yang telah dibuat dalam sistem
          </CardDescription>
        </CardHeader>
        <CardContent>
          {isLoading ? (
            <div className="flex items-center justify-center h-[200px]">
              <LoadingSpinner />
            </div>
          ) : (
            <div className="overflow-x-auto">
              <Table>
                <TableHeader>
                  <TableRow>
                    <TableHead>Periode</TableHead>
                    <TableHead>Tanggal</TableHead>
                    <TableHead>Total Pendapatan</TableHead>
                    <TableHead className="text-center">Pesanan</TableHead>
                    <TableHead className="text-center">Status Pesanan</TableHead>
                    <TableHead className="text-center">Jenis Pesanan</TableHead>
                    <TableHead>Rating</TableHead>
                    <TableHead className="text-right">Aksi</TableHead>
                  </TableRow>
                </TableHeader>
                <TableBody>
                  {reportsData.length === 0 ? (
                    <TableRow>
                      <TableCell
                        colSpan={8}
                        className="text-center text-muted-foreground"
                      >
                        Tidak ada data laporan
                      </TableCell>
                    </TableRow>
                  ) : (
                    reportsData.map((report) => (
                      <TableRow key={report.id}>
                        <TableCell>
                          <div className="flex items-center space-x-2">
                            <Badge variant="outline">
                              {getPeriodLabel(report.reportPeriod)}
                            </Badge>
                            {report.isAutoGenerated && (
                              <Badge variant="secondary" className="text-xs">
                                Auto
                              </Badge>
                            )}
                          </div>
                        </TableCell>
                        <TableCell>
                          <div className="text-sm">
                            {formatDate(report.startDate)}
                            {report.startDate !== report.endDate && (
                              <> - {formatDate(report.endDate)}</>
                            )}
                          </div>
                        </TableCell>
                        <TableCell>
                          <span className="font-medium">
                            {formatCurrency(parseFloat(report.totalIncome))}
                          </span>
                        </TableCell>
                        <TableCell className="text-center">
                          <span className="font-medium">
                            {report.totalOrders}
                          </span>
                        </TableCell>
                        <TableCell>
                          <div className="text-sm space-y-1">
                            <div>Selesai: {report.completedOrders}</div>
                            <div>Batal: {report.canceledOrders}</div>
                            <div>Pending: {report.pendingOrders}</div>
                          </div>
                        </TableCell>
                        <TableCell>
                          <div className="text-sm space-y-1">
                            <div>Transport: {report.transportOrders}</div>
                            <div>Tour: {report.tourOrders}</div>
                          </div>
                        </TableCell>
                        <TableCell>
                          {report.averageRating ? (
                            <div className="flex items-center space-x-1">
                              <span>{report.averageRating}</span>
                              <span className="text-yellow-500">â˜…</span>
                            </div>
                          ) : (
                            <span className="text-muted-foreground">-</span>
                          )}
                        </TableCell>
                        <TableCell className="text-right">
                          <Button
                            variant="ghost"
                            size="sm"
                            onClick={() => handleViewReport(report.id)}
                          >
                            <Eye className="h-4 w-4" />
                          </Button>
                        </TableCell>
                      </TableRow>
                    ))
                  )}
                </TableBody>
              </Table>
            </div>
          )}
        </CardContent>
      </Card>
    </>
  );
}
