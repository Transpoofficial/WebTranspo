// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id                      String              @id @default(cuid())
  fullName                String
  email                   String              @unique
  password                String?
  phoneNumber             String
  address                 String?
  role                    Role
  orders                  Order[]
  approvedPayments        Payment[]           @relation("ApprovedPayments")
  approvedRefunds         RefundRequest[]     @relation("ApprovedRefunds")
  createdAt               DateTime            @default(now())
  updatedAt               DateTime            @updatedAt @default(now())
}

model Order {
  id                      String              @id @default(cuid())
  userId                  String
  user                    User                @relation(fields: [userId], references: [id])
  orderType               OrderType
  orderStatus             OrderStatus
  payment                 Payment?
  transportation          TransportationOrder?
  packageOrder            PackageOrder?
  review                  Review?
  createdAt               DateTime            @default(now())
  updatedAt               DateTime            @updatedAt
}

model Payment {
  id                      String              @id @default(cuid())
  orderId                 String              @unique
  order                   Order               @relation(fields: [orderId], references: [id])
  senderName              String
  transferDate            DateTime
  proofUrl                String?
  paymentStatus           PaymentStatus
  totalPrice              Decimal             @db.Decimal(10, 2)
  approvedByAdminId       String?
  approvedByAdmin         User?               @relation("ApprovedPayments", fields: [approvedByAdminId], references: [id])
  refundRequest           RefundRequest?
  createdAt               DateTime              @default(now())
  updatedAt               DateTime              @updatedAt
}

model RefundRequest {
  id                      String              @id @default(cuid())
  paymentId               String              @unique
  payment                 Payment             @relation(fields: [paymentId], references: [id])
  reason                  String
  requestDate             DateTime
  refundStatus            RefundStatus
  approvedByAdminId       String?
  approvedByAdmin         User?               @relation("ApprovedRefunds", fields: [approvedByAdminId], references: [id])
  createdAt               DateTime            @default(now())
  updatedAt               DateTime            @updatedAt
}

model TransportationOrder {
  id                      String              @id @default(cuid())
  orderId                 String              @unique
  order                   Order               @relation(fields: [orderId], references: [id])
  departureDate           DateTime
  pickupLocation          String
  destination             String
  vehicleCount            Int
  roundTrip               Boolean
  totalDistance           Float
  vehicles                Vehicle[]           // One-to-many relation to Vehicle
  destinations            DestinationTransportation[] // One-to-many relation to DestinationTransportation
  createdAt               DateTime            @default(now())
  updatedAt               DateTime            @updatedAt
}

model DestinationTransportation {
  id                      String              @id @default(cuid())
  transportationOrderId   String
  transportationOrder     TransportationOrder @relation(fields: [transportationOrderId], references: [id])
  destinationName         String              // this column can be change to destinationId/locationId if the google maps API is available
  createdAt               DateTime            @default(now())
  updatedAt               DateTime            @updatedAt
}

model Review {
  id                      String              @id @default(cuid())
  orderId                 String              @unique
  order                   Order               @relation(fields: [orderId], references: [id])
  rating                  Int
  content                 String
  createdAt               DateTime            @default(now())
  updatedAt               DateTime            @updatedAt
}

model PackageOrder {
  id                      String              @id @default(cuid())
  orderId                 String              @unique
  order                   Order               @relation(fields: [orderId], references: [id])
  packageId               String
  package                 TourPackage         @relation(fields: [packageId], references: [id])
  departureDate           DateTime
  createdAt               DateTime            @default(now())
  updatedAt               DateTime            @updatedAt
}

model Vehicle {
  id                      String              @id @default(cuid())
  vehicleTypeId           String
  vehicleType             VehicleType         @relation(fields: [vehicleTypeId], references: [id])
  seatCount               Int
  ratePerKm               Decimal             @db.Decimal(10, 2)
  additionalDetails       String?
  transportationOrderId   String?             // Foreign key to TransportationOrder (nullable)
  transportationOrder     TransportationOrder? @relation(fields: [transportationOrderId], references: [id])
  tours                   TourPackage[]
  createdAt               DateTime            @default(now())
  updatedAt               DateTime            @updatedAt
}

model VehicleType {
  id                      String              @id @default(cuid())
  name                    String
  vehicles                Vehicle[]
  createdAt               DateTime            @default(now())
  updatedAt               DateTime            @updatedAt
}

model TourPackage {
  id                      String              @id @default(cuid())
  vehicleId               String              
  vehicle                 Vehicle             @relation(fields: [vehicleId], references: [id])
  name                    String
  destination             String
  durationDays            Int
  price                   Decimal             @db.Decimal(10, 2)
  advantages              Json
  services                Json
  photoUrl                Json
  packageOrders           PackageOrder[]
  createdAt               DateTime            @default(now())
  updatedAt               DateTime            @updatedAt
}

enum Role {
  CUSTOMER
  ADMIN
  SUPER_ADMIN
}

enum OrderType {
  TRANSPORT
  TOUR
}

enum OrderStatus {
  PENDING
  CONFIRMED
  CANCELED
  COMPLETED
  REFUNDED
}

enum PaymentStatus {
  PENDING
  APPROVED
  REJECTED
  REFUNDED
}

enum RefundStatus {
  PENDING
  APPROVED
  REJECTED
}
