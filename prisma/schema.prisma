// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id                      String              @id @default(cuid())
  fullName                String
  email                   String              @unique
  password                String?
  phoneNumber             String?
  address                 String?
  role                    Role
  orders                  Order[]
  approvedPayments        Payment[]           @relation("ApprovedPayments")
  approvedRefunds         RefundRequest[]     @relation("ApprovedRefunds")
  articles                Article[]           @relation("AuthorArticles")
  // Reset password fields
  resetPasswordToken      String?
  resetPasswordExpiry     DateTime?
  createdAt               DateTime            @default(now())
  updatedAt               DateTime            @updatedAt @default(now())
}

model Article {
  id                      String              @id @default(cuid())
  title                   String
  content                 String              @db.Text
  authorId                String
  author                  User                @relation("AuthorArticles",fields: [authorId], references: [id])
  mainImgUrl              String
  createdAt               DateTime            @default(now())
  updatedAt               DateTime            @updatedAt
}


model Order {
  id                      String              @id @default(cuid())
  userId                  String
  user                    User                @relation(fields: [userId], references: [id])
  orderType               OrderType
  orderStatus             OrderStatus
  payment                 Payment?
  fullName                String
  phoneNumber             String?
  email                   String?
  totalPassengers         Int?
  note                    String?
  transportation          TransportationOrder?
  packageOrder            PackageOrder?
  vehicleTypeId           String?            
  vehicleType             VehicleType?        @relation(fields: [vehicleTypeId], references: [id]) 
  review                  Review?
  createdAt               DateTime            @default(now())
  updatedAt               DateTime            @updatedAt
}

model Payment {
  id                      String              @id @default(cuid())
  orderId                 String              @unique
  order                   Order               @relation(fields: [orderId], references: [id])
  senderName              String
  transferDate            DateTime
  proofUrl                String?
  paymentStatus           PaymentStatus
  totalPrice              Decimal             @db.Decimal(12, 2)
  approvedByAdminId       String?
  approvedByAdmin         User?               @relation("ApprovedPayments", fields: [approvedByAdminId], references: [id])
  note                    String?             
  refundRequest           RefundRequest?
  createdAt               DateTime            @default(now())
  updatedAt               DateTime            @updatedAt
}

model RefundRequest {
  id                      String              @id @default(cuid())
  paymentId               String              @unique
  payment                 Payment             @relation(fields: [paymentId], references: [id])
  reason                  String
  requestDate             DateTime
  refundStatus            RefundStatus
  approvedByAdminId       String?
  approvedByAdmin         User?               @relation("ApprovedRefunds", fields: [approvedByAdminId], references: [id])
  createdAt               DateTime            @default(now())
  updatedAt               DateTime            @updatedAt
}

model TransportationOrder {
  id                      String              @id @default(cuid())
  orderId                 String              @unique
  order                   Order               @relation(fields: [orderId], references: [id])
  // Removed departureDate, pickupLocation, destination fields
  vehicleCount            Int
  roundTrip               Boolean
  totalDistance           Float
  destinations            DestinationTransportation[] // One-to-many relation to DestinationTransportation
  createdAt               DateTime            @default(now())
  updatedAt               DateTime            @updatedAt
}

model DestinationTransportation {
  id                      String              @id @default(cuid())
  transportationOrderId   String
  transportationOrder     TransportationOrder @relation(fields: [transportationOrderId], references: [id])
  // Enhanced location data
  lat                     Float?              // Added lat field
  lng                     Float?              // Added lng field
  address                 String              // Added explicit address field 
  arrivalTime             String?             // Existing field
  isPickupLocation        Boolean             @default(false) // To identify the pickup point
  sequence                Int                 @default(0)     // To maintain order
  departureDate           DateTime?           // Added from TransportationOrder
  createdAt               DateTime            @default(now())
  updatedAt               DateTime            @updatedAt
}

model Review {
  id                      String              @id @default(cuid())
  orderId                 String              @unique
  order                   Order               @relation(fields: [orderId], references: [id])
  rating                  Int
  content                 String
  isShow                  Boolean             @default(false)
  createdAt               DateTime            @default(now())
  updatedAt               DateTime            @updatedAt
}

model PackageOrder {
  id                      String              @id @default(cuid())
  orderId                 String              @unique
  order                   Order               @relation(fields: [orderId], references: [id])
  packageId               String
  package                 TourPackage         @relation(fields: [packageId], references: [id])
  departureDate           DateTime
  people                  Int?
  createdAt               DateTime            @default(now())
  updatedAt               DateTime            @updatedAt
}


model VehicleType {
  id                      String              @id @default(cuid())
  capacity                Int
  pricePerKm              Decimal             @db.Decimal(10,Â 2)
  name                    String              @unique
  orders                  Order[]            
  createdAt               DateTime            @default(now())
  updatedAt               DateTime            @updatedAt
}

model TourPackage { 
  id                      String              @id @default(cuid()) 
  photoUrl                Json 
  name                    String 
  price                   Decimal             @db.Decimal(10, 2)
  description             String              @db.Text
  meetingPoint            String
  minPersonCapacity       Int 
  maxPersonCapacity       Int 
  includes                Json 
  excludes                Json 
  itineraries             Json 
  requirements            Json 
  tickets                 Json? 
  is_private              Boolean 
  packageOrders           PackageOrder[] 
  createdAt               DateTime            @default(now()) 
  updatedAt               DateTime            @updatedAt 
}

model Report {
  id                      String              @id @default(cuid())
  reportPeriod            ReportPeriod
  startDate               DateTime
  endDate                 DateTime
  totalIncome             Decimal             @db.Decimal(15, 2)
  totalOrders             Int
  completedOrders         Int                 @default(0)
  canceledOrders          Int                 @default(0)
  pendingOrders           Int                 @default(0)
  transportOrders         Int                 @default(0)
  tourOrders              Int                 @default(0)
  averageRating           Decimal?            @db.Decimal(3, 2)
  popularDestinations     Json?
  topVehicleTypes         Json?
  isAutoGenerated         Boolean             @default(true)
  createdAt               DateTime            @default(now())
  updatedAt               DateTime            @updatedAt
}

enum Role {
  CUSTOMER
  ADMIN
  SUPER_ADMIN
}

enum OrderType {
  TRANSPORT
  TOUR
}

enum OrderStatus {
  PENDING
  CONFIRMED
  CANCELED
  COMPLETED
  REFUNDED
}

enum PaymentStatus {
  PENDING
  APPROVED
  REJECTED
  REFUNDED
}

enum RefundStatus {
  PENDING
  APPROVED
  REJECTED
}

enum ReportPeriod {
  DAILY
  WEEKLY
  MONTHLY
  YEARLY
}